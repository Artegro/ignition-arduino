#define FRONTS_PER_ROTATE 1 // Количество прохождений шторки через датчик за 1 оборот
#define MICROS_IN_MINUTE 60000000UL // Количество микросекунд в минуте
#define TIME_FOR_RPM_COUNT (MICROS_IN_MINUTE / FRONTS_PER_ROTATE) // определяем коэффициент для расчёта скорости вращения в зависимости от количества импульсов на оборот
#define Modul_Size 600  // Размер активного элемента
// Объявляем контрольные точки перегиба графика (обороты в минуту)
#define RPM_700 700
#define RPM_1000 1000
#define RPM_1250 1250
#define RPM_1500 1500
#define RPM_1750 1750
#define RPM_2000 2000
#define RPM_2250 2250
#define RPM_2500 2500
#define RPM_2750 2750
#define RPM_3000 3000
#define RPM_3250 3250
#define RPM_3500 3500
#define RPM_3750 3750
#define RPM_4000 4000
#define RPM_4250 4250
#define RPM_4500 4500
#define RPM_4750 4750
#define RPM_5000 5000
#define RPM_5250 5250
#define RPM_5500 5500
#define RPM_5750 5750
#define RPM_6000 6000
#define RPM_6250 6250
#define RPM_6500 6500
#define RPM_6750 6750
#define RPM_7000 7000

#define DEC_DEGREES 3600 // Количество десятичных долей градуса в полном обороте, потому что все расчёты углов мы ведём в десятичных долях

// тут выставляем таблицы опережения углы * 10.
// таблица саруман опозит (стандарт) по умолчанию
#define ANGLE_700 1
#define ANGLE_1000 33
#define ANGLE_1250 73
#define ANGLE_1500 114
#define ANGLE_1750 154
#define ANGLE_2000 195
#define ANGLE_2250 230
#define ANGLE_2500 260
#define ANGLE_2750 285
#define ANGLE_3000 305
#define ANGLE_3250 320
#define ANGLE_3500 332
#define ANGLE_3750 343
#define ANGLE_4000 351
#define ANGLE_4250 359
#define ANGLE_4500 367
#define ANGLE_4750 374
#define ANGLE_5000 382
#define ANGLE_5250 391
#define ANGLE_5500 397
#define ANGLE_5750 404
#define ANGLE_6000 407
#define ANGLE_6250 407
#define ANGLE_6500 406
#define ANGLE_6750 405
#define ANGLE_7000 400
// таблица саруман опозит (калясыч) при нажатии кнопки
#define ANGLE_S_700 1
#define ANGLE_S_1000 22
#define ANGLE_S_1250 45
#define ANGLE_S_1500 70
#define ANGLE_S_1750 95
#define ANGLE_S_2000 123
#define ANGLE_S_2250 150
#define ANGLE_S_2500 175
#define ANGLE_S_2750 198
#define ANGLE_S_3000 218
#define ANGLE_S_3250 235
#define ANGLE_S_3500 247
#define ANGLE_S_3750 257
#define ANGLE_S_4000 263
#define ANGLE_S_4250 267
#define ANGLE_S_4500 269
#define ANGLE_S_4750 271
#define ANGLE_S_5000 273
#define ANGLE_S_5250 275
#define ANGLE_S_5500 277
#define ANGLE_S_5750 278
#define ANGLE_S_6000 279
#define ANGLE_S_6250 279
#define ANGLE_S_6500 278
#define ANGLE_S_6750 277
#define ANGLE_S_7000 275

#define CHARGE_TIME 2000 //Время заряда катушки  в мкС

//unsigned long newtime;
unsigned long oldtime;         // Переменная для расчёта RPM.
unsigned long diffTime;        // Переменная для расчёта RPM.
unsigned long VMTtime;         // Время достижения ВМТ (вход шторки в датчик). Текущее время, за вычетом времени на дёргание ногами
unsigned long nextIgnition = 0; // Время, в которое надо подать искру, если используется временной сдвиг
word rpm = 0;                 // Переменная тахометра.
bool modulator;               // Флаг "текущее состояние шторки".
bool ignitionFlag = false;            // Флаг "немедленное зажигание без задержки"
bool ignitionFlagWithOffset = false;  // Флаг "Момент зажигания с временым сдвигом" (МЗВС)
bool oldModulator;            // Флаг "предыдущее состояние шторки"
bool Booton;                  // Переменная состояния кнопки переклюяения графиков
word ignitionDegree;      // Угол зажигания.
byte startloop = 0;            //устанавливаем переменную счетчика первого оборота двигателя от втм


void setup()

{
  pinMode(1, OUTPUT);  // выход на коммутатор
  pinMode(0, INPUT_PULLUP);  // Вход с датчика зажигания.
  pinMode(2, INPUT_PULLUP);  //Назначаем пин кнопки переключения графиков, подтягивам на +.
   PORTB |= (1 << 1); //Подаем высокий уровень на Р1 
}

void readrpm()
{
  diffTime = VMTtime - oldtime;
  rpm = TIME_FOR_RPM_COUNT / diffTime;
  oldtime = VMTtime;
}

void countIgnitionTime() {
  nextIgnition = VMTtime + diffTime + (diffTime * (Modul_Size - ignitionDegree - CHARGE_TIME) / DEC_DEGREES);

}

void loop() {
 

  //modulator = digitalRead(0); //Считывает состояние датчика зажигания.
  if (PINB & 0b00000001) { //Если бит установлен =1
    modulator = true ;
  }
  else {
    modulator = false;
  }

  if (modulator != oldModulator) {
    oldModulator = modulator;

    if (modulator == HIGH) {  // HIGH для активного элемента вырез, LOW для активного элемента пластины
       VMTtime = micros(); // Записываем время вмт
      PORTB &= ~(1 << 1); // Подаем низкий уровень на выход Р1 (имитируем шторку)
      if (startloop > 1) { // проверяем переменную первого запуска , если оборот первый то пропускаем условия образования искры, до момента изменения показателей модулятора
          if (rpm >= RPM_700) {           
           while (micros()< nextIgnition) {} // Ждем пока не придет врямя искры по опережению
           PORTB &= ~(1 << 1); //заряжаем катущку
            delayMicroseconds( CHARGE_TIME ); 
           PORTB |= (1 << 1);  //Подаем высокий уровень на Р1 , БАХ      
          }       
         } // конец проверки на первый оборот   
      return;
    }
   readrpm(); // Считаем обороты
   if (rpm < RPM_700) {
            PORTB &= ~(1 << 1); //заряжаем катущку
            delayMicroseconds( CHARGE_TIME ); 
           PORTB |= (1 << 1);  //Подаем высокий уровень на Р1 , БАХ
   }
    
    if (startloop <= 1) { // Пока идет первый оборот двигателя
      startloop = startloop + 1 ;    //устанасливаем счетчик в  переменную первого полного оборота двигателя от втм
     }

    // Booton = digitalRead(2); // считываем состояние нажания кнопки переключения графиков, кнопка замыкается на GND
    if (PINB & 0b00000100) { //Если бит установлен =1
      Booton = true ;
    }
    else {
      Booton = false;
    }

    if (Booton == HIGH) {    // Если кнопка не нажата , ток высокий на входе то график по умолчанию
      if (rpm > RPM_4000) {                    // Если обороты больше 4000
        if (rpm > RPM_6000) {                  // Если обороты больше 6000
          if (rpm > RPM_6500) {                // Если обороты более 6500
            if (rpm > RPM_6750) {                // Если обороты более 6750
              if (rpm > RPM_7000) {                // Если обороты более 7000
                return;                             //выходем без расчета, искра в вмт
              }
              else {           // Если обороты меньше или ровно 7000 и обороты больше 6750
                ignitionDegree = map(rpm, RPM_6750, RPM_7000, ANGLE_6750, ANGLE_7000); //-ignitionLoad; // устанавливаем  угол в пределах
              }

            }
            else {           // Если обороты меньше или ровно 6750 и обороты больше 6500
              ignitionDegree = map(rpm, RPM_6500, RPM_6750, ANGLE_6500, ANGLE_6750); //-ignitionLoad; // устанавливаем  угол в пределах
            }
          }
          else {           // Если обороты меньше или ровно 6500 и обороты больше 6000
            if (rpm > RPM_6250) {
              ignitionDegree = map(rpm, RPM_6250, RPM_6500, ANGLE_6250, ANGLE_6500); //-ignitionLoad; // устанавливаем  угол в пределах
            }
            else {           // Если обороты меньше или ровно 6250 и обороты больше 6000
              ignitionDegree = map(rpm, RPM_6000, RPM_6250, ANGLE_6000, ANGLE_6250); //-ignitionLoad; // устанавливаем  угол в пределах
            }
          }
        }

        else {           // Если обороты меньше или ровно 6000 и обороты больше 4000
          if (rpm > RPM_5000) {                // Если обороты более 5000
            if (rpm > RPM_5500) {                // Если обороты более 5500
              if (rpm > RPM_5750) {                // Если обороты более 5750 и меньше или ровно 6000
                ignitionDegree = map(rpm, RPM_5750, RPM_6000, ANGLE_5750, ANGLE_6000); //-ignitionLoad; // устанавливаем  угол в пределах
              }
              else {           // Если обороты меньше или ровно 5750 и обороты больше 5500
                ignitionDegree = map(rpm, RPM_5500, RPM_5750, ANGLE_5500, ANGLE_5750); //-ignitionLoad; // устанавливаем  угол в пределах
              }

            }
            else {           // Если обороты меньше или ровно 5500 и обороты больше 5000
              if (rpm > RPM_5250) {                // Если обороты более 5250 и меньше или ровно 5500
                ignitionDegree = map(rpm, RPM_5250, RPM_5500, ANGLE_5250, ANGLE_5500); //-ignitionLoad; // устанавливаем  угол в пределах
              }
              else {           // Если обороты меньше или ровно 5250 и обороты больше 5000
                ignitionDegree = map(rpm, RPM_5000, RPM_5250, ANGLE_5000, ANGLE_5250); //-ignitionLoad; // устанавливаем  угол в пределах
              }
            }
          }
          else {           // Если обороты меньше или ровно 5000 и обороты больше 4000
            if (rpm > RPM_4500) {                // Если обороты более 4500
              if (rpm > RPM_4750) {                // Если обороты более 4750 и меньше или ровно 5000
                ignitionDegree = map(rpm, RPM_4750, RPM_5000, ANGLE_4750, ANGLE_5000); //-ignitionLoad; // устанавливаем  угол в пределах
              }
              else {           // Если обороты меньше или ровно 4750 и обороты больше 4500
                ignitionDegree = map(rpm, RPM_4500, RPM_4750, ANGLE_4500, ANGLE_4750); //-ignitionLoad; // устанавливаем  угол в пределах
              }

            }
            else {           // Если обороты меньше или ровно 4500 и обороты больше 4000
              if (rpm > RPM_4250) {                // Если обороты более 4250 и меньше или ровно 4500
                ignitionDegree = map(rpm, RPM_4250, RPM_4500, ANGLE_4250, ANGLE_4500); //-ignitionLoad; // устанавливаем  угол в пределах
              }
              else {           // Если обороты меньше или ровно 4250 и обороты больше4500
                ignitionDegree = map(rpm, RPM_4000, RPM_4250, ANGLE_4000, ANGLE_4250); //-ignitionLoad; // устанавливаем  угол в пределах
              }
            }
          }
        }
      }



      else {  // Если обороты меньше или ровно 4000
        if (rpm > RPM_2000) {                   // Если обороты меньше или ровно 4000 и обороты больше 2000
          if (rpm > RPM_3000) {              // Если обороты меньше или ровно 4000 и обороты больше 3000
            if (rpm > RPM_3500) {              // Если обороты меньше или ровно 4000 и обороты больше 3500
              if (rpm > RPM_3750) {              // Если обороты меньше или ровно 4000 и обороты больше 3750
                ignitionDegree = map(rpm, RPM_3750, RPM_4000, ANGLE_3750, ANGLE_4000);// -ignitionLoad; // устанавливаем  угол в пределах
              }
              else { // Если обороты меньше или ровно 3750 и обороты больше 3500
                ignitionDegree = map(rpm, RPM_3500, RPM_3750, ANGLE_3500, ANGLE_3750);// -ignitionLoad; // устанавливаем  угол в пределах
              }
            }
            else { // Если обороты меньше или ровно 3500 и обороты больше 3000
              if (rpm > RPM_3250) {              // Если обороты меньше или ровно 3500 и обороты больше 3250
                ignitionDegree = map(rpm, RPM_3250, RPM_3500, ANGLE_3250, ANGLE_3500);// -ignitionLoad; // устанавливаем  угол в пределах
              }
              else { // Если обороты меньше или ровно 3250 и обороты больше 3000
                ignitionDegree = map(rpm, RPM_3000, RPM_3250, ANGLE_3000, ANGLE_3250);// -ignitionLoad; // устанавливаем  угол в пределах
              }
            }
          }
          else {// Если обороты меньше или ровно 3000 и обороты больше 2000
            if (rpm > RPM_2500) {              // Если обороты меньше или ровно 3000 и обороты больше 2500
              if (rpm > RPM_2750) {              // Если обороты меньше или ровно 3000 и обороты больше 2750
                ignitionDegree = map(rpm, RPM_2750, RPM_3000, ANGLE_2750, ANGLE_3000);// -ignitionLoad; // устанавливаем  угол в пределах
              }
              else { // Если обороты меньше или ровно 2750 и обороты больше 2500
                ignitionDegree = map(rpm, RPM_2500, RPM_2750, ANGLE_2500, ANGLE_2750);// -ignitionLoad; // устанавливаем  угол в пределах
              }
            }
            else { // Если обороты меньше или ровно 2500 и обороты больше 2000
              if (rpm > RPM_2250) {              // Если обороты меньше или ровно 2500 и обороты больше 2250
                ignitionDegree = map(rpm, RPM_2250, RPM_2500, ANGLE_2250, ANGLE_2500);// -ignitionLoad; // устанавливаем  угол в пределах
              }
              else { // Если обороты меньше или ровно 2250 и обороты больше 2000
                ignitionDegree = map(rpm, RPM_2000, RPM_2250, ANGLE_2000, ANGLE_2250);// -ignitionLoad; // устанавливаем  угол в пределах
              }// конец обороты меньше или ровно 2250 и обороты больше 2000
            }   // конец обороты меньше или ровно 2500 и обороты больше 2000
          }   //конец  обороты меньше или ровно 3000 и обороты больше 2000


        }  // конец обороты меньше или ровно 4000 и обороты больше 2000
        else {// Если обороты меньше или ровно 2000 и обороты больше 0
          if (rpm > RPM_1000) {              // Если обороты меньше или ровно 2000 и обороты больше 1000
            if (rpm > RPM_1500) {              // Если обороты меньше или ровно 2000 и обороты больше 1500
              if (rpm > RPM_1750) {              // Если обороты меньше или ровно 2000 и обороты больше 1750
                ignitionDegree = map(rpm, RPM_1750, RPM_2000, ANGLE_1750, ANGLE_2000);// -ignitionLoad; // устанавливаем  угол в пределах
              }
              else { // Если обороты меньше или ровно 1750 и обороты больше 1500
                ignitionDegree = map(rpm, RPM_1500, RPM_1750, ANGLE_1500, ANGLE_1750);// -ignitionLoad; // устанавливаем  угол в пределах
              }
            }
            else { // Если обороты меньше или ровно 1500 и обороты больше 1000
              if (rpm > RPM_1250) {              // Если обороты меньше или ровно 1500 и обороты больше 1250
                ignitionDegree = map(rpm, RPM_1250, RPM_1500, ANGLE_1250, ANGLE_1500);// -ignitionLoad; // устанавливаем  угол в пределах
              }
              else { // Если обороты меньше или ровно 1250 и обороты больше 1000
                ignitionDegree = map(rpm, RPM_1000, RPM_1250, ANGLE_1000, ANGLE_1250);// -ignitionLoad; // устанавливаем  угол в пределах
              }
            }
          }
          else {// Если обороты меньше или ровно 1000 и обороты больше 0
            if (rpm > RPM_700) {              // Если обороты меньше или ровно 1000 и обороты больше 700
              ignitionDegree = map(rpm, RPM_700, RPM_1000, ANGLE_700, ANGLE_1000);// -ignitionLoad; // устанавливаем  угол в пределах
            }
            else { // Если обороты меньше или ровно 700 и обороты больше 0
              return; //Выход без расчета, искра в вмт
            }
          }
        }   //конец  обороты меньше или ровно 2000 и обороты больше 0000
      } // конец обороты менше или ровно 4000

    } //конец кнопка не нажата

    else {  // Если кнопка нажата , ток назкий на входе то график колясыч
      if (rpm > RPM_4000) {                    // Если обороты больше 4000
        if (rpm > RPM_6000) {                  // Если обороты больше 6000
          if (rpm > RPM_6500) {                // Если обороты более 6500
            if (rpm > RPM_6750) {                // Если обороты более 6750
              if (rpm > RPM_7000) {                // Если обороты более 7000
                return;                             //Выход без расчета, искра в вмт
              }
              else {           // Если обороты меньше или ровно 7000 и обороты больше 6750
                ignitionDegree = map(rpm, RPM_6750, RPM_7000, ANGLE_S_6750, ANGLE_S_7000); //-ignitionLoad; // устанавливаем  угол в пределах
              }

            }
            else {           // Если обороты меньше или ровно 6750 и обороты больше 6500
              ignitionDegree = map(rpm, RPM_6500, RPM_6750, ANGLE_S_6500, ANGLE_S_6750); //-ignitionLoad; // устанавливаем  угол в пределах
            }
          }
          else {           // Если обороты меньше или ровно 6500 и обороты больше 6000
            if (rpm > RPM_6250) {
              ignitionDegree = map(rpm, RPM_6250, RPM_6500, ANGLE_S_6250, ANGLE_S_6500); //-ignitionLoad; // устанавливаем  угол в пределах
            }
            else {           // Если обороты меньше или ровно 6250 и обороты больше 6000
              ignitionDegree = map(rpm, RPM_6000, RPM_6250, ANGLE_S_6000, ANGLE_S_6250); //-ignitionLoad; // устанавливаем  угол в пределах
            }
          }
        }

        else {           // Если обороты меньше или ровно 6000 и обороты больше 4000
          if (rpm > RPM_5000) {                // Если обороты более 5000
            if (rpm > RPM_5500) {                // Если обороты более 5500
              if (rpm > RPM_5750) {                // Если обороты более 5750 и меньше или ровно 6000
                ignitionDegree = map(rpm, RPM_5750, RPM_6000, ANGLE_S_5750, ANGLE_S_6000); //-ignitionLoad; // устанавливаем  угол в пределах
              }
              else {           // Если обороты меньше или ровно 5750 и обороты больше 5500
                ignitionDegree = map(rpm, RPM_5500, RPM_5750, ANGLE_S_5500, ANGLE_S_5750); //-ignitionLoad; // устанавливаем  угол в пределах
              }

            }
            else {           // Если обороты меньше или ровно 5500 и обороты больше 5000
              if (rpm > RPM_5250) {                // Если обороты более 5250 и меньше или ровно 5500
                ignitionDegree = map(rpm, RPM_5250, RPM_5500, ANGLE_S_5250, ANGLE_S_5500); //-ignitionLoad; // устанавливаем  угол в пределах
              }
              else {           // Если обороты меньше или ровно 5250 и обороты больше 5000
                ignitionDegree = map(rpm, RPM_5000, RPM_5250, ANGLE_S_5000, ANGLE_S_5250); //-ignitionLoad; // устанавливаем  угол в пределах
              }
            }
          }
          else {           // Если обороты меньше или ровно 5000 и обороты больше 4000
            if (rpm > RPM_4500) {                // Если обороты более 4500
              if (rpm > RPM_4750) {                // Если обороты более 4750 и меньше или ровно 5000
                ignitionDegree = map(rpm, RPM_4750, RPM_5000, ANGLE_S_4750, ANGLE_S_5000); //-ignitionLoad; // устанавливаем  угол в пределах
              }
              else {           // Если обороты меньше или ровно 4750 и обороты больше 4500
                ignitionDegree = map(rpm, RPM_4500, RPM_4750, ANGLE_S_4500, ANGLE_S_4750); //-ignitionLoad; // устанавливаем  угол в пределах
              }

            }
            else {           // Если обороты меньше или ровно 4500 и обороты больше 4000
              if (rpm > RPM_4250) {                // Если обороты более 4250 и меньше или ровно 4500
                ignitionDegree = map(rpm, RPM_4250, RPM_4500, ANGLE_S_4250, ANGLE_S_4500); //-ignitionLoad; // устанавливаем  угол в пределах
              }
              else {           // Если обороты меньше или ровно 4250 и обороты больше4500
                ignitionDegree = map(rpm, RPM_4000, RPM_4250, ANGLE_S_4000, ANGLE_S_4250); //-ignitionLoad; // устанавливаем  угол в пределах
              }
            }
          }
        }
      }



      else {  // Если обороты меньше или ровно 4000
        if (rpm > RPM_2000) {                   // Если обороты меньше или ровно 4000 и обороты больше 2000
          if (rpm > RPM_3000) {              // Если обороты меньше или ровно 4000 и обороты больше 3000
            if (rpm > RPM_3500) {              // Если обороты меньше или ровно 4000 и обороты больше 3500
              if (rpm > RPM_3750) {              // Если обороты меньше или ровно 4000 и обороты больше 3750
                ignitionDegree = map(rpm, RPM_3750, RPM_4000, ANGLE_S_3750, ANGLE_S_4000);// -ignitionLoad; // устанавливаем  угол в пределах
              }
              else { // Если обороты меньше или ровно 3750 и обороты больше 3500
                ignitionDegree = map(rpm, RPM_3500, RPM_3750, ANGLE_S_3500, ANGLE_S_3750);// -ignitionLoad; // устанавливаем  угол в пределах
              }
            }
            else { // Если обороты меньше или ровно 3500 и обороты больше 3000
              if (rpm > RPM_3250) {              // Если обороты меньше или ровно 3500 и обороты больше 3250
                ignitionDegree = map(rpm, RPM_3250, RPM_3500, ANGLE_S_3250, ANGLE_S_3500);// -ignitionLoad; // устанавливаем  угол в пределах
              }
              else { // Если обороты меньше или ровно 3250 и обороты больше 3000
                ignitionDegree = map(rpm, RPM_3000, RPM_3250, ANGLE_S_3000, ANGLE_S_3250);// -ignitionLoad; // устанавливаем  угол в пределах
              }
            }
          }
          else {// Если обороты меньше или ровно 3000 и обороты больше 2000
            if (rpm > RPM_2500) {              // Если обороты меньше или ровно 3000 и обороты больше 2500
              if (rpm > RPM_2750) {              // Если обороты меньше или ровно 3000 и обороты больше 2750
                ignitionDegree = map(rpm, RPM_2750, RPM_3000, ANGLE_S_2750, ANGLE_S_3000);// -ignitionLoad; // устанавливаем  угол в пределах
              }
              else { // Если обороты меньше или ровно 2750 и обороты больше 2500
                ignitionDegree = map(rpm, RPM_2500, RPM_2750, ANGLE_S_2500, ANGLE_S_2750);// -ignitionLoad; // устанавливаем  угол в пределах
              }
            }
            else { // Если обороты меньше или ровно 2500 и обороты больше 2000
              if (rpm > RPM_2250) {              // Если обороты меньше или ровно 2500 и обороты больше 2250
                ignitionDegree = map(rpm, RPM_2250, RPM_2500, ANGLE_S_2250, ANGLE_S_2500);// -ignitionLoad; // устанавливаем  угол в пределах
              }
              else { // Если обороты меньше или ровно 2250 и обороты больше 2000
                ignitionDegree = map(rpm, RPM_2000, RPM_2250, ANGLE_S_2000, ANGLE_S_2250);// -ignitionLoad; // устанавливаем  угол в пределах
              }// конец обороты меньше или ровно 2250 и обороты больше 2000
            }   // конец обороты меньше или ровно 2500 и обороты больше 2000
          }   //конец  обороты меньше или ровно 3000 и обороты больше 2000


        }  // конец обороты меньше или ровно 4000 и обороты больше 2000
        else {// Если обороты меньше или ровно 2000 и обороты больше 0
          if (rpm > RPM_1000) {              // Если обороты меньше или ровно 2000 и обороты больше 1000
            if (rpm > RPM_1500) {              // Если обороты меньше или ровно 2000 и обороты больше 1500
              if (rpm > RPM_1750) {              // Если обороты меньше или ровно 2000 и обороты больше 1750
                ignitionDegree = map(rpm, RPM_1750, RPM_2000, ANGLE_S_1750, ANGLE_S_2000);// -ignitionLoad; // устанавливаем  угол в пределах
              }
              else { // Если обороты меньше или ровно 1750 и обороты больше 1500
                ignitionDegree = map(rpm, RPM_1500, RPM_1750, ANGLE_S_1500, ANGLE_S_1750);// -ignitionLoad; // устанавливаем  угол в пределах
              }
            }
            else { // Если обороты меньше или ровно 1500 и обороты больше 1000
              if (rpm > RPM_1250) {              // Если обороты меньше или ровно 1500 и обороты больше 1250
                ignitionDegree = map(rpm, RPM_1250, RPM_1500, ANGLE_S_1250, ANGLE_S_1500);// -ignitionLoad; // устанавливаем  угол в пределах
              }
              else { // Если обороты меньше или ровно 1250 и обороты больше 1000
                ignitionDegree = map(rpm, RPM_1000, RPM_1250, ANGLE_S_1000, ANGLE_S_1250);// -ignitionLoad; // устанавливаем  угол в пределах
              }
            }
          }
          else {// Если обороты меньше или ровно 1000 и обороты больше 0
            if (rpm > RPM_700) {              // Если обороты меньше или ровно 1000 и обороты больше 700
              ignitionDegree = map(rpm, RPM_700, RPM_1000, ANGLE_S_700, ANGLE_S_1000);// -ignitionLoad; // устанавливаем  угол в пределах
            }
            else { // Если обороты меньше или ровно 700 и обороты больше 0
              return; //Выход без расчета, искра в вмт
            }
          }
        }   //конец  обороты меньше или ровно 2000 и обороты больше 0000
      } // конец обороты менше или ровно 4000


    }
    if (ignitionDegree > 0) {
      countIgnitionTime();
    }

  }
    else { // если модулятор не изменился
     if (micros() > (VMTtime+6000000)){ //Отключение катушки если более 2секунд простоя
     PORTB |= (1 << 1);  //Подаем высокий уровень на Р1 отключаем катушку
   } 
  }


}
